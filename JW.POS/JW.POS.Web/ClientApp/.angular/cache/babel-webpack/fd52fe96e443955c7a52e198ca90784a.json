{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, mergeMap } from \"rxjs/operators\";\nimport stringHelper from \"@app/shared/helpers/string.helper\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/shared/services\";\nimport * as i2 from \"@angular/router\";\nexport let AuthorizeInterceptor = /*#__PURE__*/(() => {\n  class AuthorizeInterceptor {\n    constructor(_baseUrl, authService, router) {\n      this._baseUrl = _baseUrl;\n      this.authService = authService;\n      this.router = router;\n\n      this.handleError = err => {\n        if (err.status === 401) {\n          this.authService.clearToken();\n          this.router.navigate(['login']);\n        }\n\n        return throwError({\n          success: false,\n          statusCode: 'internal_server_error'\n        });\n      };\n    }\n\n    intercept(request, next) {\n      return this.authService.getToken().pipe(mergeMap(token => this.processRequestWithToken(token, request, next)));\n    }\n\n    processRequestWithToken(token, req, next) {\n      req = req.clone({\n        url: stringHelper.trimEnding(this._baseUrl, '/') + '/' + stringHelper.trimLeading(req.url, '/')\n      });\n\n      if (!!token && token.length > 0 && this.isSameOrigin(req)) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n\n      return next.handle(req).pipe(catchError(this.handleError));\n    }\n\n    isSameOrigin(req) {\n      if (req.url.startsWith(`${window.location.origin}/`)) {\n        return true;\n      }\n\n      if (req.url.startsWith(`${window.location.host}/`)) {\n        return true;\n      }\n\n      if (/^\\/[^\\/].*/.test(req.url)) {\n        return true;\n      }\n\n      return false;\n    }\n\n  }\n\n  AuthorizeInterceptor.ɵfac = function AuthorizeInterceptor_Factory(t) {\n    return new (t || AuthorizeInterceptor)(i0.ɵɵinject(\"BASE_URL\"), i0.ɵɵinject(i1.AuthenticateService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthorizeInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizeInterceptor,\n    factory: AuthorizeInterceptor.ɵfac\n  });\n  return AuthorizeInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}