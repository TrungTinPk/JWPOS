{"ast":null,"code":"import { BehaviorSubject, concat, of } from \"rxjs\";\nimport jwtDecode from 'jwt-decode';\nimport { filter, map, take, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage.service\";\nexport let AuthenticateService = /*#__PURE__*/(() => {\n  class AuthenticateService {\n    constructor(_httpClient, _storage) {\n      this._httpClient = _httpClient;\n      this._storage = _storage;\n      this._userSubject = new BehaviorSubject(null);\n    }\n\n    persistToken(token) {\n      this._storage.set('token', token);\n    }\n\n    getToken() {\n      return of(this._storage.get('token') || '');\n    }\n\n    clearToken() {\n      return this._storage.set('token', null);\n    }\n\n    isAuthenticated() {\n      return this.getUser().pipe(map(u => !!u));\n    }\n\n    getUser() {\n      return concat(this._userSubject.pipe(take(1), filter(u => !!u)), this.getCurrentUser().pipe(filter(u => !!u), tap(u => this._userSubject.next(u))), this._userSubject.asObservable());\n    }\n\n    getCurrentUser() {\n      const token = this._storage.get('token');\n\n      if (!token) {\n        return of(null);\n      }\n\n      let claims;\n\n      try {\n        claims = jwtDecode(token);\n      } catch (_a) {\n        return of(null);\n      }\n\n      if (!claims || Date.now().valueOf() > claims.exp * 100) {\n        return of(null);\n      }\n\n      const user = {\n        username: claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'],\n        fullName: claims['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n        role: claims['http://schemas.microsoft.com/ws/2008/06/identity/claims/role']\n      };\n      return of(user);\n    }\n\n  }\n\n  AuthenticateService.ɵfac = function AuthenticateService_Factory(t) {\n    return new (t || AuthenticateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService));\n  };\n\n  AuthenticateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticateService,\n    factory: AuthenticateService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticateService;\n})();","map":null,"metadata":{},"sourceType":"module"}